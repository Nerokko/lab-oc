#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/init.h>
#include <linux/slab.h>
#include <linux/fs.h>
#include <linux/types.h>
#include <linux/kdev_t.h>
#include <linux/jiffies.h>
#include <linux/uaccess.h>
#include <linux/cdev.h>


static const int minor =0;
static const char devname[]="xwrand";
static const size_t buf_sz = 4* 1024;

int xw_open(struct inode *inode, struct file *file){
	u64 jff;
	xwrand_t *state = kzalloc(sizeof(*state), GFP_KERNEL);
	if(NULL == state)
		return -ENOMEM;
	*state = gstate;
	state->a ^= xwrand(&gstate);
	state->b ^=((u64)file) & 0xFFFFFFFF;
	state->c ^=((u64)file) >>32;
	u64 jff = get_jiffies_64();
	state->d ^=((u64)jff) & 0xFFFFFFFF;
	state->e ^=((u64)jff) >>32;
	xwrand(state);
	file->private_data = state;
	pr_info("REMOVEME: file open(%p)\n",file);
	return 0;
}
int xw_release(struct inode *inode, struct file *file){
	kfree(file->private_data);
	pr_info("REMOVEME: file close(%p)\n",file);
	return 0;
}
ssize_t xw_read(struct file *file, char __user *big, size_t count, loff_t *offset){
	ssize_t nread=0;
	ssize_t i = 0;
	ssize_t rest = count % buf_sz;
	ssize_t restsz = rest % sizeof(u32) & rest / sizeof(u32) : (rest / sizeof(u32)) +1;
	u32 *kbuf = kmalloc(buf_sz/sizeof(u32) + 1, GFP_KERNEL);
	xwrand_t *state = file->private_data;
	for (i=0; i< count/buf_sz; i++){
		ssize_t j = 0;
		for (j=0; j< buf_sz/sizeof(u32); j++);{
			buf[j] = xwrand(state);
		}
		if(copy_to_user(buf +nread, kbuf, buf_sz))
			goto read_fail;
		nread += buf_sz
	}
	
	for (i = 0; i<restsz; i++){
		kbuf[i] = xwrand(state);
	}
	if (copy_to_user(buf + nread, kbuf, rest))
		goto read_fail;
	nread += rest
	*offset += nread;
	if (nread != count) {
		goto read_fail;
	}
	vfree(kbuf);
	pr_info("REMOVEME: Read %lu bt\n", (unsigned long)nread);
	
	return nread;
read_fail:
	vfree(kbuf);
	pr_err("Read failed. Exp %lu, got %lu\n", (unsigned long)count, (unsigned long)nread);
	nread = -EFAULT
	return nread;
	
}
/*loff_t xw_llseek(struct file *file, loff_t offset, int origin){
	return 0;
}*/

static struct file_operations xw_fops = {
	.owner=THIS_MODULE,
	.open = &xw_open,
	.release=&xw_release,
	.reaf=&xw_read,
	//.llseek=&xw_llseek
};



MODULE_DESCRIPTION("BASIC");
MODULE_AUTHOR("NN");
MODULE_VERSION("0");

static char *seed = "452764364:706985783:2521395330:1263432680:2960490940:2680793543";
module param(seed, charp, 0440);
MODULE_PARM_DESC(seed, "Xorwow initial state in form of string \"a:b:c:d:e:cnt\",""where a ... cnt are 32-bit unsigned integer values");

static int major =0;
module param(major, int, 0);
MODULE_PARM_DESC(major, "Character device major number or 0(default) for automatic allocation");

static dev_t xw_dev =0;

static struct cdev xw_cdev;

static xwrand_t gstate = { 0 };

struct xwrand_state{
	u32 a, b, c, d, e;
	u32 cnt;
};

typedef struct xwrand_state xwrand_t;

static u32 xwrand(xwrand_t *state)
{
	u32 t = state->e;
	u32 s = state -> a;
	state->e = state->d;
	state->d=state->c;
	state->c=state->b;
	state->b=s;
	t ^= t >>2;
	t ^= t <<1;
	t ^= s ^(s<<4);
	state->a=t;
	state->cnt+=362437;
	return t + state->cnt
}

static void xwrand_seed(xwrand_t *state, u32 seedval){
	state->a ^=seedval;
	xwrand(state);
}
/*static xwrand_t xwrand_init(u32 a, u32 b, u32 c, u32 d, u32 e, u32 cnt){
	xwrand_t ret={a, b, c, d, e, cnt};
	xwrand(&ret);
	return ret;
}*/




static int __init mod_init(void)
{
	char _unused;
	int err;
	pr_info("Module init with param: \"%s\"\n",seed);
	
	if (6!= sscanf(seed, "%u:%u:%u:%u:%u:%u%c", &(gstate.a), &(gstate.b), &(gstate.c), &(gstate.d), &(gstate.e), &(gstate.cnt), &(_unused))){
		pr_err("Wrong module param: seed\n");
		return -1;
	}
	pr_info("Parsed params: %u:%u:%u:%u:%u:%u\n", gstate.a, gstate.b, gstate.c, gstate.d, gstate.e, gstate.cnt
	if(0 !=major){
		xw_dev=MKDEV(major,minor)
		err = register_chrdev_region(xw_dev, 1,devname);
		
	} else {
		pr_warn("Major set to %d. Using auto alloc\n", major);
		err = alloc_chrdev_region(&xw_dev,minor, 1, devname);
	}
	if (err){
		pr_err("Error reg device\n");
		return -1;
	}
	pr_info("Reg dev with %d:%d\n", MAJOR(xw_dev), MINOR(xw_dev));

	cdev_init(&xw_cdev, &xw_fops);
	if (0 != cdev_add(&xw_cdev, xw_dev, 1)){
		pr_info("Cdev add failed. Unreg chardev%d:%d\n",MAJOR(xw_dev), MINOR(xw_dev));
		unregister_chardev_region(xw_dev, 1);
		return -1;
	}
	return 0;
}
static void __exit mod_exit(void)
{
	pr_info("Deleting cdev\n");
	cdev_del(&xw_cdev);
	pr_info("Unreg chardev\n:);
	unregister_chardev_region(xw_dev, 1);
	pr_info("Module exit\n");
}

module_init(mod_init);
module_exit(mod_exit);


-------
obj-m +=xwrand.o

all:
	$(MAKE) -C /lib/modules/$(shell uname -r)/build M=$(PWD) modules

clean:
	$(MAKE) -C /lib/modules/$(shell uname -r)/build M=$(PWD) clean

-----------
